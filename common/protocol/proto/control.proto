syntax = "proto3";
package protocol;
option go_package = "..;protocol";

import "common.proto";

message ControlMessage{

  message HostReportMessage{
    HostDescriptor Host = 1;

    // 从Host传递过来的错误报告
    repeated ErrorMessage ErrorReport = 10;
    // 从Host传递的日志消息
    repeated LogMessage Log = 11;

    // Host上执行的插件实例列表
    map<string, PluginDescriptor> SupportedList = 20;
    map<string, PluginInstanceDescriptor> InstanceList = 21;
  }

  message SupportCheckRequestMessage{
    // 请求体
    string ApplicationID = 1;
    Version ApplicationVersion = 2;
    Version SystemVersion = 3;
    string InstanceID = 4;
    // 目标HostID
    HostDescriptor Host = 10;
  }

  message SupportCheckResponseMessage{
    HostDescriptor Host = 1;
    PluginFullDescriptor Application = 2;
    string InstanceID = 3;
    bool Supported = 20;
  }

  enum PluginActionType {
    Enable = 0;
    Disable = 1;
    Start = 2;
    Stop = 3;
    Install = 4;
    UnInstall = 5;
    Upgrade = 6;
    CheckState = 7;
    CheckCompatibility = 8;
  }

  // 插件提供的生命周期方法实现
  message PluginLifeCycleRequestMessage{
    HostDescriptor Host = 1;
    PluginInstanceDescriptor Instance = 2;
    PluginActionType Action = 3;
    string Reason = 4;

    PluginDescriptor OldVersion = 10;
  }

  message PluginLifeCycleResponseMessage{
    HostDescriptor Host = 1;
    PluginInstanceDescriptor Instance = 2;
    bool Result = 4;
    ErrorMessage Error = 5;
  }

  message KillPluginHostMessage{
    bool Kill = 1;
  }

  message KillPluginMessage{
    string InstanceID = 1;
  }

  // 发起的心跳消息
  uint64 Heartbeat = 10;

  // 干掉host
  KillPluginHostMessage Kill = 12;
  // 干掉插件
  KillPluginMessage killPlugin = 13;

  // 从Host传递过来的报告
  HostReportMessage Report = 11;

  SupportCheckRequestMessage CheckPlugin = 21;
  SupportCheckResponseMessage CheckPluginResult = 22;

  PluginLifeCycleRequestMessage LifeCycleRequest = 31;
  PluginLifeCycleResponseMessage LifeCycleResponse = 32;
}