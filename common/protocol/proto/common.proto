syntax = "proto3";
option go_package = "..;protocol";
package protocol;

// 定义一些通用的数据结构
message Version{
  int32 Major = 1;
  int32 Minor = 2;
  int32 Revision = 3;
}

message HostDescriptor{
  string HostID = 1;
  string Name = 2;
  string Language = 3;
  Version HostVersion = 4;
  Version MinSystemVersion = 5;
  Version LanguageVersion = 6;
}

message HostBootDescriptor{
  string BootID = 1;
  string Name = 2;
  Version BootVersion = 3;
}

message PluginDescriptor{
  string ApplicationID = 1;
  string Name = 2;
  string Language = 3;
  Version LanguageVersion = 4;
  Version ApplicationVersion = 5;
  Version HostVersion = 6;
  Version MinSystemVersion = 7;
}

message PluginFullDescriptor{
  PluginDescriptor Application = 1;
  string Configuration = 2;
  bytes Certificate = 3;
}

message PluginInstanceDescriptor{
  PluginDescriptor Application = 1;
  string InstanceID = 2;
  string HostID = 3;
}

message HeaderVal {
  repeated string val = 1;
}

message HttpRequestMessage{
  string Method = 1;
  string Url = 2;
  map<string, HeaderVal> Headers = 3;
  bytes Body = 4;
  bool  Root = 5;
  bool  Internal = 6;
}

message HttpResponseMessage {
  int64 StatusCode = 1;
  map<string, HeaderVal> Headers = 2;
  bytes Body = 3;
  ErrorMessage Error = 4;
}

message HttpContextMessage {
  HttpRequestMessage Request = 1;
  HttpResponseMessage Response = 2;
}

message LogMessage{
  enum LogLevel {
    Trace = 0;
    Info = 1;
    Warning = 2;
    Error = 3;
  }
  LogLevel Level = 1;
  string Content = 2;
}

message ErrorMessage{
  int64 Code = 1;
  string Error = 2;
  string Msg = 3;
}

////////////////////////////////////////////////////////////
message RouterNode{
  string ID = 1;
  map<string, string> Tags = 2;
}

message NodeRecord{
  RouterNode Node = 1;
  uint64 TimestampIn = 2;
  uint64 TimestampOut = 3;
  int32 HipCount = 4;
}

// 用于消息路由
message RouterMessage{
  // 消息来源
  RouterNode Source = 1;
  // 消息目标。适用与点对点的通讯协议
  RouterNode Distinct = 2;

  // 消息序列号
  uint64 SeqNo = 3;

  // 消息关联序列号列表
  repeated uint64 RefSeqNos = 4;

  // 消息传递节点清单
  repeated NodeRecord Records = 5;
}

