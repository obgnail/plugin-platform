syntax = "proto3";
package protocol;
option go_package = "protocol";

import "common.proto";

// 插件需要相应的消息请求及其对应的应答
// 插件提供的接口实现
// 插件提供的配置处理实现

message ConfigurationMessage{
  message ConfigurationChangeMessage{
    string NewConfig = 1;
    string OrigConfig = 2;
  }

  ConfigurationChangeMessage ConfigChangeRequest = 1;
  ErrorMessage ConfigChaneResponse = 2;
}

// 事件
message NotificationMessage{
  enum EventType{
    TimeStamp = 0;
    Project = 1;
    Wiki = 2;
  }
  EventType Type = 1;
  int64 Timestamp = 2;
  string Data = 3;
}

message PluginMessage{
  // 添加消息路由数据
  PluginInstanceDescriptor Target = 1;
  HostDescriptor Host = 2;

  // 插件实现的各种http方法，包括对内（前端）和对外（独立的http服务）
  HttpContextMessage Http = 21;

  // 插件配置变动通知
  ConfigurationMessage Config = 22;

  // 插件接收的通知消息
  NotificationMessage Notification = 23;
}
